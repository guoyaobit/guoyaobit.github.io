<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>devstack 实验环境安装</title>
    <url>/2021/06/16/devstack%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每一个学习openstack 的新手 往往是通过devstack 入手的 ，经常会出现各问题，安装的时候报错，大部分情况还是 由于网络 gfw 的，导致下载失败，因此必须要先翻墙，学会科学上网，才能顺利安装。</p>
<p>正常情况下大概需要30分钟就能装好</p>
<p>[TOC]</p>
<h1 id="配置科学上网"><a href="#配置科学上网" class="headerlink" title="配置科学上网"></a>配置科学上网</h1><h2 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h2><p>启用 v2ray 必须提前买好 vpn科学上网，一般是自建VPS 或者 机场</p>
<p>自己使用的是 <a href="https://justmysocks3.net/members/index.php">https://justmysocks3.net/members/index.php</a> 搬瓦工 的机场，目前还是比较稳定</p>
<p>安装客户端参考：<a href="https://github.com/v2fly/fhs-install-v2ray">https://github.com/v2fly/fhs-install-v2ray</a></p>
<h3 id="一键安装脚本："><a href="#一键安装脚本：" class="headerlink" title="一键安装脚本："></a>一键安装脚本：</h3><p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure>

<p>执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status v2ray </span><br></pre></td></tr></table></figure>

<p>查看config 文件的路径：/usr/local/etc/v2ray/config.json</p>
<p>在PC 端windows 的 上客户端可以直接导出v2ray 的 config.json 配置文件 ，减少 操作量。</p>
<p>复制 config.json 文件 到 /usr/local/etc/v2ray/config.json </p>
<p>重启服务 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:10808 google.com</span><br></pre></td></tr></table></figure>

<p>其中 10808是本地代理的端口号</p>
<h3 id="静态安装"><a href="#静态安装" class="headerlink" title="静态安装"></a>静态安装</h3><p>由于 网络问题 ，可能GitHub 无法连接上因此只能静态方式安装</p>
<p> 参考链接：<a href="https://umaint.github.io/2019/01/04/v2ray-ubuntu/">https://umaint.github.io/2019/01/04/v2ray-ubuntu/</a></p>
<p>下载 V2ray ：链接<a href="https://github.com/v2ray/v2ray-core/releases">https://github.com/v2ray/v2ray-core/releases</a></p>
<h2 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h2><p>为了让软件使用代理，因此必须安装 privoxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install privoxy</span><br></pre></td></tr></table></figure>

<p>打开配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/privoxy/config +1336</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">forward-socks5t / 127.0.0.1:10808 .</span><br></pre></td></tr></table></figure>

<p>重启服务启用代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure>

<p>启用 privoxy 代理</p>
<p>启用https 代理：    </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118 &amp;&amp; curl ip.gs</span><br></pre></td></tr></table></figure>

<p>启用 http代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8118 &amp;&amp; curl ip.gs</span><br></pre></td></tr></table></figure>

<p>部分 IP 不需要使用代理的，这个可能会影响到devstack 安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export no_proxy= 127.0.0.1,localhost,本地IP </span><br></pre></td></tr></table></figure>

<p> 验证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl Google.com</span><br><span class="line">curl ip.gs</span><br></pre></td></tr></table></figure>

<h2 id="安装proxychains-（可选）"><a href="#安装proxychains-（可选）" class="headerlink" title="安装proxychains （可选）"></a>安装proxychains （可选）</h2><p>更新源或者安装包时，也可能出现无法访问的情况，因此还可以使用proxychains +v2ray 执行某些命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y proxychains</span><br></pre></td></tr></table></figure>

<p>修改配置文件/etc/proxychains.conf最后一行</p>
<p>socks5 127.0.0.1 10808</p>
<p>使用proxychains方法, 在命令前加上proxychains, 如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains apt update</span><br></pre></td></tr></table></figure>

<h1 id="安装devstack"><a href="#安装devstack" class="headerlink" title="安装devstack"></a>安装devstack</h1><p>参考官方文档：</p>
<p><a href="https://docs.openstack.org/devstack/latest/">https://docs.openstack.org/devstack/latest/</a></p>
<h2 id="创建stack-用户"><a href="#创建stack-用户" class="headerlink" title="创建stack 用户"></a>创建stack 用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br><span class="line">echo &quot;stack ALL=(ALL) NOPASSWD: ALL&quot; | sudo tee /etc/sudoers.d/stack</span><br><span class="line">sudo su - stack</span><br><span class="line"> </span><br><span class="line">在~/.bashrc 添加 </span><br><span class="line"></span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br><span class="line">export http_proxy=http://127.0.0.1:8118</span><br><span class="line">export no_proxy=&quot;127.0.0.1,localhost,本地IP&quot;</span><br><span class="line"> </span><br><span class="line">并重启</span><br></pre></td></tr></table></figure>



<h2 id="下载-devstack"><a href="#下载-devstack" class="headerlink" title="下载 devstack"></a>下载 devstack</h2><p>指定 ussuri 版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://opendev.org/openstack/devstack -b stable/ussuri</span><br><span class="line"><span class="built_in">cd</span> devstack</span><br></pre></td></tr></table></figure>

<h2 id="创建local-conf"><a href="#创建local-conf" class="headerlink" title="创建local.conf"></a>创建local.conf</h2><p>创建local.conf</p>
<p>[[local|localrc]]<br>ADMIN_PASSWORD=secret<br>DATABASE_PASSWORD=$ADMIN_PASSWORD<br>RABBIT_PASSWORD=$ADMIN_PASSWORD<br>SERVICE_PASSWORD=$ADMIN_PASSWORD</p>
<p>安装： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./stack.sh</span><br></pre></td></tr></table></figure>

<p>卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./unstack.sh</span><br><span class="line">./clean.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>devstack</tag>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>总述</title>
    <url>/2021/06/16/%E6%80%BB%E8%BF%B0/</url>
    <content><![CDATA[<p>Openstack 作为一个软件工具，对大多人而言 只是类似VMware，不过是下载，安装，使用而已。</p>
<p>因此我把这些过程以blog的形式记录了下来，基于openstack 的开源精神分享出去，希望大家少走点弯路，多花点时间在思考上。 </p>
]]></content>
  </entry>
  <entry>
    <title>openstack GPU虚拟机</title>
    <url>/2021/06/16/openstack-GPU-%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="在宿主机中做虚拟化"><a href="#在宿主机中做虚拟化" class="headerlink" title="在宿主机中做虚拟化"></a>在宿主机中做虚拟化</h1><p>开启CPU虚拟化支持  VT-D 和IOMMU 在系统bios中查看VT-D是否打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dmesg | grep -e DMAR -e IOMMU </span><br></pre></td></tr></table></figure>

<p>确认IOMMU已经开启</p>
<p>VFIO 虚拟化驱动</p>
<p>默认开机状态下 ，通过指令</p>
<p>Lspci | grep VGA 查看当前安装NVIDIA 显卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@compute ~]# lspci | grep NVIDIA</span><br><span class="line"></span><br><span class="line">05:00.0 VGA compatible controller: NVIDIA Corporation GM204GL [Tesla M60] (rev a1)</span><br><span class="line"></span><br><span class="line">06:00.0 VGA compatible controller: NVIDIA Corporation GM204GL [Tesla M60] (rev a1)</span><br></pre></td></tr></table></figure>

<p>显示更详细的信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># lspci -nn | grep NVIDIA</span></span><br><span class="line"></span><br><span class="line">05:00.0 VGA compatible controller [0300]: NVIDIA Corporation GM204GL [Tesla M60] [10de:13f2] (rev a1)</span><br><span class="line"></span><br><span class="line">06:00.0 VGA compatible controller [0300]: NVIDIA Corporation GM204GL [Tesla M60] [10de:13f2] (rev a1)</span><br></pre></td></tr></table></figure>

<p>其中 05:00.0  表示显卡安装的物理位置， 以及设备相关配置放在linux 的文件目录 /sys/bus/pci/devices/</p>
<p>VGA compatible controller [0300] 表示 M60 工作在图形模式。</p>
<p>10de:13f2  为设备型号  10de  vendor ID 为厂商ID 即NVIDIA  13f2 为 product ID 即M60显卡上 一个  GM204GL 核 </p>
<p>要想让GPU可以在虚拟机上运行 ，实现虚拟机到物理机的中断映射，物理地址映射 bar空间映射 等</p>
<p>需要在物理机上 使GPU加载VFIO 驱动 在未安装NVIDIA的情况下，系统自带的驱动是nouveau，在安装了NVIDIA 驱动使用的 nvidia </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@compute ~]<span class="comment"># lspci -k -d 10de:13f2</span></span><br><span class="line"></span><br><span class="line">05:00.0 VGA compatible controller: NVIDIA Corporation GM204GL [Tesla M60] (rev a1)</span><br><span class="line"></span><br><span class="line">Subsystem: NVIDIA Corporation Device 115e</span><br><span class="line"></span><br><span class="line">Kernel driver <span class="keyword">in</span> use: vfio-pci</span><br><span class="line"></span><br><span class="line">Kernel modules: nouveau, nvidia_drm, nvidia</span><br><span class="line"></span><br><span class="line">06:00.0 VGA compatible controller: NVIDIA Corporation GM204GL [Tesla M60] (rev a1)</span><br><span class="line"></span><br><span class="line">Subsystem: NVIDIA Corporation Device 115e</span><br><span class="line"></span><br><span class="line">Kernel driver <span class="keyword">in</span> use: vfio-pci</span><br><span class="line"></span><br><span class="line">Kernel modules: nouveau, nvidia_drm, nvidia</span><br></pre></td></tr></table></figure>

<h1 id="在openstack中添加GPU"><a href="#在openstack中添加GPU" class="headerlink" title="在openstack中添加GPU"></a>在openstack中添加GPU</h1><p>配置 openstack nova服务</p>
<p>​    nova-cpu.conf，nova.conf</p>
<p>注意 ：</p>
<p>​    配置文件目录 为 /etc/nova/ </p>
<p>​    管理 节点 nova 服务 使用的 配置文件 为 nova.conf，计算节点 nova-compute 服务 使用 配置文件 为 nova-cpu.conf ，两个服务均为 systemd 服务 ，因此 可以在 /etc/system/systemd 文件夹找到对应的配置</p>
<p>在管理节点filter_scheduler 添加 PciPassthroughFilter</p>
<p>enabled_filters =PciPassthroughFilter </p>
<p>添加白名单 </p>
<p>[pci]</p>
<p>alias = { “vendor_id”:”10de”, “product_id”:”13f2”, “device_type”:”type-PCI”, “name”:”GPU-M60” }</p>
<p>passthrough_whitelist = { “vendor_id”: “10de”, “product_id”: “13f2” }</p>
<p>添加完成后在计算节点查看查看实时日志： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">journalctl -f --unit devstack@* </span><br></pre></td></tr></table></figure>

<p>Final resource view: name=compute phys_ram=32672MB used_ram=512MB phys_disk=149GB used_disk=0GB total_vcpus=24 used_vcpus=0 pci_stats=[PciDevicePool(count=2,numa_node=0,product_id=’13f2’,tags={dev_type=’type-PCI’},vendor_id=’10de’)]</p>
<p>在实例类型，元数据上添加 要透传的pci设备</p>
<p>pci_passthrough:alias =GPU-M60:1</p>
<p>其中：GPU-M60 为pci设备名  1 表示数量 </p>
<p>生成实例后查看是否GPU成功加载</p>
<h1 id="在客户机上安装NVIDIA驱动"><a href="#在客户机上安装NVIDIA驱动" class="headerlink" title="在客户机上安装NVIDIA驱动"></a>在客户机上安装NVIDIA驱动</h1><p>通过阿里的 apt 源 直接下载 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/7fa2af80.pub/</span><br><span class="line">|sudo apt-key add -</span><br><span class="line"></span><br><span class="line">echo &quot;deb https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/ ./&quot; &gt; /etc/apt/sources.list.d/cuda.list</span><br><span class="line"></span><br><span class="line">sudo apt update </span><br><span class="line"></span><br><span class="line">sudo apt install -y nvidia-driver-450-server</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nvswitch 机器 需要下载 fabricmanager 工具</span></span><br><span class="line"></span><br><span class="line">sudo apt install -y nvidia-fabricmanager-450</span><br><span class="line"></span><br><span class="line">sudo systemctl enable nvidia-fabricmanager</span><br><span class="line"></span><br><span class="line">sudo systemctl start nvidia-fabricmanager</span><br></pre></td></tr></table></figure>



<h1 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h1><p>在 sample 文件夹下有 GPU 的性能 测试样例 </p>
<p>deviceQuery 查询 GPU 状态</p>
<p>bandwidthTest pcie 通信测试</p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>openstack</tag>
        <tag>gpu</tag>
      </tags>
  </entry>
</search>
